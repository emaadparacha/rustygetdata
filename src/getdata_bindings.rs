/* automatically generated by rust-bindgen 0.69.4 */

#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(improper_ctypes)]
#![allow(unused)]
#![allow(unused_variables)]

#[derive(PartialEq, Copy, Clone, Hash, Debug, Default)]
#[repr(C)]
pub struct __BindgenComplex<T> {
    pub re: T,
    pub im: T,
}
pub const GD_DIRFILE_STANDARDS_VERSION: u32 = 10;
pub const _MATH_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_LIBM_SIMD_DECL_STUBS_H: u32 = 1;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __FP_LOGB0_IS_MIN: u32 = 1;
pub const __FP_LOGBNAN_IS_MIN: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const __MATH_DECLARING_DOUBLE: u32 = 1;
pub const __MATH_DECLARING_FLOATN: u32 = 0;
pub const __MATH_DECLARE_LDOUBLE: u32 = 1;
pub const FP_NAN: u32 = 0;
pub const FP_INFINITE: u32 = 1;
pub const FP_ZERO: u32 = 2;
pub const FP_SUBNORMAL: u32 = 3;
pub const FP_NORMAL: u32 = 4;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const math_errhandling: u32 = 3;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const GD_MAX_LINE_LENGTH: u32 = 4096;
pub const GD_E_OK: u32 = 0;
pub const GD_E_FORMAT: i32 = -1;
pub const GD_E_CREAT: i32 = -2;
pub const GD_E_BAD_CODE: i32 = -3;
pub const GD_E_BAD_TYPE: i32 = -4;
pub const GD_E_IO: i32 = -5;
pub const GD_E_INTERNAL_ERROR: i32 = -6;
pub const GD_E_ALLOC: i32 = -7;
pub const GD_E_RANGE: i32 = -8;
pub const GD_E_LUT: i32 = -9;
pub const GD_E_RECURSE_LEVEL: i32 = -10;
pub const GD_E_BAD_DIRFILE: i32 = -11;
pub const GD_E_BAD_FIELD_TYPE: i32 = -12;
pub const GD_E_ACCMODE: i32 = -13;
pub const GD_E_UNSUPPORTED: i32 = -14;
pub const GD_E_UNKNOWN_ENCODING: i32 = -15;
pub const GD_E_BAD_ENTRY: i32 = -16;
pub const GD_E_DUPLICATE: i32 = -17;
pub const GD_E_DIMENSION: i32 = -18;
pub const GD_E_BAD_INDEX: i32 = -19;
pub const GD_E_BAD_SCALAR: i32 = -20;
pub const GD_E_BAD_REFERENCE: i32 = -21;
pub const GD_E_PROTECTED: i32 = -22;
pub const GD_E_DELETE: i32 = -23;
pub const GD_E_ARGUMENT: i32 = -24;
pub const GD_E_CALLBACK: i32 = -25;
pub const GD_E_EXISTS: i32 = -26;
pub const GD_E_UNCLEAN_DB: i32 = -27;
pub const GD_E_DOMAIN: i32 = -28;
pub const GD_E_BOUNDS: i32 = -29;
pub const GD_E_LINE_TOO_LONG: i32 = -30;
pub const GD_N_ERROR_CODES: u32 = 31;
pub const GD_E_BAD_REPR: i32 = -3;
pub const GD_E_OPEN_LINFILE: i32 = -9;
pub const GD_E_FLUSH: i32 = -5;
pub const GD_E_OPEN: i32 = -5;
pub const GD_E_OPEN_FRAGMENT: i32 = -5;
pub const GD_E_OPEN_INCLUDE: i32 = -5;
pub const GD_E_RAW_IO: i32 = -5;
pub const GD_E_TRUNC: i32 = -5;
pub const GD_MAX_LINCOM: u32 = 3;
pub const GD_MAX_POLYORD: u32 = 5;
pub const GD_E_FORMAT_BAD_SPF: u32 = 1;
pub const GD_E_FORMAT_N_FIELDS: u32 = 2;
pub const GD_E_FORMAT_N_TOK: u32 = 3;
pub const GD_E_FORMAT_NUMBITS: u32 = 4;
pub const GD_E_FORMAT_BITNUM: u32 = 5;
pub const GD_E_FORMAT_BITSIZE: u32 = 6;
pub const GD_E_FORMAT_CHARACTER: u32 = 7;
pub const GD_E_FORMAT_BAD_LINE: u32 = 8;
pub const GD_E_FORMAT_RES_NAME: u32 = 9;
pub const GD_E_FORMAT_ENDIAN: u32 = 10;
pub const GD_E_FORMAT_BAD_TYPE: u32 = 11;
pub const GD_E_FORMAT_BAD_NAME: u32 = 12;
pub const GD_E_FORMAT_UNTERM: u32 = 13;
pub const GD_E_FORMAT_METARAW: u32 = 14;
pub const GD_E_FORMAT_NO_FIELD: u32 = 15;
pub const GD_E_FORMAT_DUPLICATE: u32 = 16;
pub const GD_E_FORMAT_LOCATION: u32 = 17;
pub const GD_E_FORMAT_PROTECT: u32 = 18;
pub const GD_E_FORMAT_LITERAL: u32 = 19;
pub const GD_E_FORMAT_WINDOP: u32 = 20;
pub const GD_E_FORMAT_META_META: u32 = 21;
pub const GD_E_FORMAT_ALIAS: u32 = 22;
pub const GD_E_FORMAT_MPLEXVAL: u32 = 23;
pub const GD_SYNTAX_ABORT: u32 = 0;
pub const GD_SYNTAX_RESCAN: u32 = 1;
pub const GD_SYNTAX_IGNORE: u32 = 2;
pub const GD_SYNTAX_CONTINUE: u32 = 3;
pub const GD_PROTECT_NONE: u32 = 0;
pub const GD_PROTECT_FORMAT: u32 = 1;
pub const GD_PROTECT_DATA: u32 = 2;
pub const GD_PROTECT_ALL: u32 = 3;
pub const GD_VERSION_CURRENT: i32 = -1;
pub const GD_VERSION_LATEST: i32 = -2;
pub const GD_VERSION_EARLIEST: i32 = -3;
pub const GD_ALL_FRAGMENTS: i32 = -1;
pub const GD_SCALAR_ENTRY_BIT: u32 = 16;
pub const GD_SPECIAL_ENTRY_BIT: u32 = 32;
pub const GD_N_ENTYPES: u32 = 19;
pub const GD_ALL_ENTRIES: u32 = 0;
pub const GD_VECTOR_ENTRIES: u32 = 33;
pub const GD_SCALAR_ENTRIES: u32 = 34;
pub const GD_ENTRIES_HIDDEN: u32 = 1;
pub const GD_ENTRIES_NOALIAS: u32 = 2;
pub const GD_REGEX_PCRE: u32 = 4;
pub const GD_REGEX_EXTENDED: u32 = 8;
pub const GD_REGEX_ICASE: u32 = 16;
pub const GD_REGEX_CASELESS: u32 = 16;
pub const GD_REGEX_JAVASCRIPT: u32 = 32;
pub const GD_REGEX_UNICODE: u32 = 64;
pub const GD_HERE: i32 = -1;
pub const GD_DEFAULT_LOOKBACK: u32 = 10;
pub const GD_LOOKBACK_ALL: i32 = -1;
pub const _INTTYPES_H: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &[u8; 2] = b"l\0";
pub const __PRIPTR_PREFIX: &[u8; 2] = b"l\0";
pub const PRId8: &[u8; 2] = b"d\0";
pub const PRId16: &[u8; 2] = b"d\0";
pub const PRId32: &[u8; 2] = b"d\0";
pub const PRId64: &[u8; 3] = b"ld\0";
pub const PRIdLEAST8: &[u8; 2] = b"d\0";
pub const PRIdLEAST16: &[u8; 2] = b"d\0";
pub const PRIdLEAST32: &[u8; 2] = b"d\0";
pub const PRIdLEAST64: &[u8; 3] = b"ld\0";
pub const PRIdFAST8: &[u8; 2] = b"d\0";
pub const PRIdFAST16: &[u8; 3] = b"ld\0";
pub const PRIdFAST32: &[u8; 3] = b"ld\0";
pub const PRIdFAST64: &[u8; 3] = b"ld\0";
pub const PRIi8: &[u8; 2] = b"i\0";
pub const PRIi16: &[u8; 2] = b"i\0";
pub const PRIi32: &[u8; 2] = b"i\0";
pub const PRIi64: &[u8; 3] = b"li\0";
pub const PRIiLEAST8: &[u8; 2] = b"i\0";
pub const PRIiLEAST16: &[u8; 2] = b"i\0";
pub const PRIiLEAST32: &[u8; 2] = b"i\0";
pub const PRIiLEAST64: &[u8; 3] = b"li\0";
pub const PRIiFAST8: &[u8; 2] = b"i\0";
pub const PRIiFAST16: &[u8; 3] = b"li\0";
pub const PRIiFAST32: &[u8; 3] = b"li\0";
pub const PRIiFAST64: &[u8; 3] = b"li\0";
pub const PRIo8: &[u8; 2] = b"o\0";
pub const PRIo16: &[u8; 2] = b"o\0";
pub const PRIo32: &[u8; 2] = b"o\0";
pub const PRIo64: &[u8; 3] = b"lo\0";
pub const PRIoLEAST8: &[u8; 2] = b"o\0";
pub const PRIoLEAST16: &[u8; 2] = b"o\0";
pub const PRIoLEAST32: &[u8; 2] = b"o\0";
pub const PRIoLEAST64: &[u8; 3] = b"lo\0";
pub const PRIoFAST8: &[u8; 2] = b"o\0";
pub const PRIoFAST16: &[u8; 3] = b"lo\0";
pub const PRIoFAST32: &[u8; 3] = b"lo\0";
pub const PRIoFAST64: &[u8; 3] = b"lo\0";
pub const PRIu8: &[u8; 2] = b"u\0";
pub const PRIu16: &[u8; 2] = b"u\0";
pub const PRIu32: &[u8; 2] = b"u\0";
pub const PRIu64: &[u8; 3] = b"lu\0";
pub const PRIuLEAST8: &[u8; 2] = b"u\0";
pub const PRIuLEAST16: &[u8; 2] = b"u\0";
pub const PRIuLEAST32: &[u8; 2] = b"u\0";
pub const PRIuLEAST64: &[u8; 3] = b"lu\0";
pub const PRIuFAST8: &[u8; 2] = b"u\0";
pub const PRIuFAST16: &[u8; 3] = b"lu\0";
pub const PRIuFAST32: &[u8; 3] = b"lu\0";
pub const PRIuFAST64: &[u8; 3] = b"lu\0";
pub const PRIx8: &[u8; 2] = b"x\0";
pub const PRIx16: &[u8; 2] = b"x\0";
pub const PRIx32: &[u8; 2] = b"x\0";
pub const PRIx64: &[u8; 3] = b"lx\0";
pub const PRIxLEAST8: &[u8; 2] = b"x\0";
pub const PRIxLEAST16: &[u8; 2] = b"x\0";
pub const PRIxLEAST32: &[u8; 2] = b"x\0";
pub const PRIxLEAST64: &[u8; 3] = b"lx\0";
pub const PRIxFAST8: &[u8; 2] = b"x\0";
pub const PRIxFAST16: &[u8; 3] = b"lx\0";
pub const PRIxFAST32: &[u8; 3] = b"lx\0";
pub const PRIxFAST64: &[u8; 3] = b"lx\0";
pub const PRIX8: &[u8; 2] = b"X\0";
pub const PRIX16: &[u8; 2] = b"X\0";
pub const PRIX32: &[u8; 2] = b"X\0";
pub const PRIX64: &[u8; 3] = b"lX\0";
pub const PRIXLEAST8: &[u8; 2] = b"X\0";
pub const PRIXLEAST16: &[u8; 2] = b"X\0";
pub const PRIXLEAST32: &[u8; 2] = b"X\0";
pub const PRIXLEAST64: &[u8; 3] = b"lX\0";
pub const PRIXFAST8: &[u8; 2] = b"X\0";
pub const PRIXFAST16: &[u8; 3] = b"lX\0";
pub const PRIXFAST32: &[u8; 3] = b"lX\0";
pub const PRIXFAST64: &[u8; 3] = b"lX\0";
pub const PRIdMAX: &[u8; 3] = b"ld\0";
pub const PRIiMAX: &[u8; 3] = b"li\0";
pub const PRIoMAX: &[u8; 3] = b"lo\0";
pub const PRIuMAX: &[u8; 3] = b"lu\0";
pub const PRIxMAX: &[u8; 3] = b"lx\0";
pub const PRIXMAX: &[u8; 3] = b"lX\0";
pub const PRIdPTR: &[u8; 3] = b"ld\0";
pub const PRIiPTR: &[u8; 3] = b"li\0";
pub const PRIoPTR: &[u8; 3] = b"lo\0";
pub const PRIuPTR: &[u8; 3] = b"lu\0";
pub const PRIxPTR: &[u8; 3] = b"lx\0";
pub const PRIXPTR: &[u8; 3] = b"lX\0";
pub const SCNd8: &[u8; 4] = b"hhd\0";
pub const SCNd16: &[u8; 3] = b"hd\0";
pub const SCNd32: &[u8; 2] = b"d\0";
pub const SCNd64: &[u8; 3] = b"ld\0";
pub const SCNdLEAST8: &[u8; 4] = b"hhd\0";
pub const SCNdLEAST16: &[u8; 3] = b"hd\0";
pub const SCNdLEAST32: &[u8; 2] = b"d\0";
pub const SCNdLEAST64: &[u8; 3] = b"ld\0";
pub const SCNdFAST8: &[u8; 4] = b"hhd\0";
pub const SCNdFAST16: &[u8; 3] = b"ld\0";
pub const SCNdFAST32: &[u8; 3] = b"ld\0";
pub const SCNdFAST64: &[u8; 3] = b"ld\0";
pub const SCNi8: &[u8; 4] = b"hhi\0";
pub const SCNi16: &[u8; 3] = b"hi\0";
pub const SCNi32: &[u8; 2] = b"i\0";
pub const SCNi64: &[u8; 3] = b"li\0";
pub const SCNiLEAST8: &[u8; 4] = b"hhi\0";
pub const SCNiLEAST16: &[u8; 3] = b"hi\0";
pub const SCNiLEAST32: &[u8; 2] = b"i\0";
pub const SCNiLEAST64: &[u8; 3] = b"li\0";
pub const SCNiFAST8: &[u8; 4] = b"hhi\0";
pub const SCNiFAST16: &[u8; 3] = b"li\0";
pub const SCNiFAST32: &[u8; 3] = b"li\0";
pub const SCNiFAST64: &[u8; 3] = b"li\0";
pub const SCNu8: &[u8; 4] = b"hhu\0";
pub const SCNu16: &[u8; 3] = b"hu\0";
pub const SCNu32: &[u8; 2] = b"u\0";
pub const SCNu64: &[u8; 3] = b"lu\0";
pub const SCNuLEAST8: &[u8; 4] = b"hhu\0";
pub const SCNuLEAST16: &[u8; 3] = b"hu\0";
pub const SCNuLEAST32: &[u8; 2] = b"u\0";
pub const SCNuLEAST64: &[u8; 3] = b"lu\0";
pub const SCNuFAST8: &[u8; 4] = b"hhu\0";
pub const SCNuFAST16: &[u8; 3] = b"lu\0";
pub const SCNuFAST32: &[u8; 3] = b"lu\0";
pub const SCNuFAST64: &[u8; 3] = b"lu\0";
pub const SCNo8: &[u8; 4] = b"hho\0";
pub const SCNo16: &[u8; 3] = b"ho\0";
pub const SCNo32: &[u8; 2] = b"o\0";
pub const SCNo64: &[u8; 3] = b"lo\0";
pub const SCNoLEAST8: &[u8; 4] = b"hho\0";
pub const SCNoLEAST16: &[u8; 3] = b"ho\0";
pub const SCNoLEAST32: &[u8; 2] = b"o\0";
pub const SCNoLEAST64: &[u8; 3] = b"lo\0";
pub const SCNoFAST8: &[u8; 4] = b"hho\0";
pub const SCNoFAST16: &[u8; 3] = b"lo\0";
pub const SCNoFAST32: &[u8; 3] = b"lo\0";
pub const SCNoFAST64: &[u8; 3] = b"lo\0";
pub const SCNx8: &[u8; 4] = b"hhx\0";
pub const SCNx16: &[u8; 3] = b"hx\0";
pub const SCNx32: &[u8; 2] = b"x\0";
pub const SCNx64: &[u8; 3] = b"lx\0";
pub const SCNxLEAST8: &[u8; 4] = b"hhx\0";
pub const SCNxLEAST16: &[u8; 3] = b"hx\0";
pub const SCNxLEAST32: &[u8; 2] = b"x\0";
pub const SCNxLEAST64: &[u8; 3] = b"lx\0";
pub const SCNxFAST8: &[u8; 4] = b"hhx\0";
pub const SCNxFAST16: &[u8; 3] = b"lx\0";
pub const SCNxFAST32: &[u8; 3] = b"lx\0";
pub const SCNxFAST64: &[u8; 3] = b"lx\0";
pub const SCNdMAX: &[u8; 3] = b"ld\0";
pub const SCNiMAX: &[u8; 3] = b"li\0";
pub const SCNoMAX: &[u8; 3] = b"lo\0";
pub const SCNuMAX: &[u8; 3] = b"lu\0";
pub const SCNxMAX: &[u8; 3] = b"lx\0";
pub const SCNdPTR: &[u8; 3] = b"ld\0";
pub const SCNiPTR: &[u8; 3] = b"li\0";
pub const SCNoPTR: &[u8; 3] = b"lo\0";
pub const SCNuPTR: &[u8; 3] = b"lu\0";
pub const SCNxPTR: &[u8; 3] = b"lx\0";
pub const GD_SIZE8: u32 = 1;
pub const GD_SIZE16: u32 = 2;
pub const GD_SIZE32: u32 = 4;
pub const GD_SIZE64: u32 = 8;
pub const GD_SIZE128: u32 = 16;
pub const GD_SIGNED: u32 = 32;
pub const GD_IEEE754: u32 = 128;
pub const GD_COMPLEX: u32 = 256;
pub const GD_CHAR: u32 = 512;
pub const GD_EN_COMPSCAL: u32 = 1;
pub const GD_EN_CALC: u32 = 2;
pub const GD_EN_HIDDEN: u32 = 4;
pub const GD_ACCMODE: u32 = 1;
pub const GD_RDONLY: u64 = 0;
pub const GD_RDWR: u32 = 1;
pub const GD_FORCE_ENDIAN: u32 = 2;
pub const GD_BIG_ENDIAN: u32 = 4;
pub const GD_LITTLE_ENDIAN: u32 = 8;
pub const GD_CREAT: u32 = 16;
pub const GD_EXCL: u32 = 32;
pub const GD_TRUNC: u32 = 64;
pub const GD_PEDANTIC: u32 = 128;
pub const GD_FORCE_ENCODING: u32 = 256;
pub const GD_VERBOSE: u32 = 512;
pub const GD_IGNORE_DUPS: u32 = 1024;
pub const GD_IGNORE_REFS: u32 = 2048;
pub const GD_PRETTY_PRINT: u32 = 4096;
pub const GD_ARM_ENDIAN: u32 = 8192;
pub const GD_NOT_ARM_ENDIAN: u32 = 0;
pub const GD_PERMISSIVE: u32 = 16384;
pub const GD_TRUNCSUB: u32 = 32768;
pub const GD_ENCODING: u32 = 251658240;
pub const GD_AUTO_ENCODED: u32 = 0;
pub const GD_UNENCODED: u32 = 16777216;
pub const GD_TEXT_ENCODED: u32 = 33554432;
pub const GD_SLIM_ENCODED: u32 = 50331648;
pub const GD_GZIP_ENCODED: u32 = 67108864;
pub const GD_BZIP2_ENCODED: u32 = 83886080;
pub const GD_LZMA_ENCODED: u32 = 100663296;
pub const GD_SIE_ENCODED: u32 = 117440512;
pub const GD_ZZIP_ENCODED: u32 = 134217728;
pub const GD_ZZSLIM_ENCODED: u32 = 150994944;
pub const GD_FLAC_ENCODED: u32 = 167772160;
pub const GD_ENC_UNSUPPORTED: u32 = 251658240;
pub const GD_DEL_META: u32 = 1;
pub const GD_DEL_DATA: u32 = 2;
pub const GD_DEL_DEREF: u32 = 4;
pub const GD_DEL_FORCE: u32 = 8;
pub const GD_REN_DATA: u32 = 1;
pub const GD_REN_UPDB: u32 = 2;
pub const GD_REN_DANGLE: u32 = 4;
pub const GD_REN_FORCE: u32 = 8;
pub const GD_SEEK_SET: u32 = 0;
pub const GD_SEEK_CUR: u32 = 1;
pub const GD_SEEK_END: u32 = 2;
pub const GD_SEEK_WRITE: u32 = 4;
pub const GD_DESYNC_PATHCHECK: u32 = 1;
pub const GD_DESYNC_REOPEN: u32 = 2;
pub const GD_OLIMIT_NONE: u32 = 0;
pub const GD_OLIMIT_CURRENT: i32 = -1;
pub const GD_OLIMIT_COUNT: i32 = -2;
pub const GD_GETDATA_VERSION: &[u8; 7] = b"0.11.0\0";
pub const GD_GETDATA_INT_VERSION: u32 = 1100;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub fn __fpclassify(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbit(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsig(__x: f64, __y: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignaling(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acos(__x: f64) -> f64;
}
extern "C" {
    pub fn __acos(__x: f64) -> f64;
}
extern "C" {
    pub fn asin(__x: f64) -> f64;
}
extern "C" {
    pub fn __asin(__x: f64) -> f64;
}
extern "C" {
    pub fn atan(__x: f64) -> f64;
}
extern "C" {
    pub fn __atan(__x: f64) -> f64;
}
extern "C" {
    pub fn atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn __atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn cos(__x: f64) -> f64;
}
extern "C" {
    pub fn __cos(__x: f64) -> f64;
}
extern "C" {
    pub fn sin(__x: f64) -> f64;
}
extern "C" {
    pub fn __sin(__x: f64) -> f64;
}
extern "C" {
    pub fn tan(__x: f64) -> f64;
}
extern "C" {
    pub fn __tan(__x: f64) -> f64;
}
extern "C" {
    pub fn cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn exp(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp(__x: f64) -> f64;
}
extern "C" {
    pub fn frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn log(__x: f64) -> f64;
}
extern "C" {
    pub fn __log(__x: f64) -> f64;
}
extern "C" {
    pub fn log10(__x: f64) -> f64;
}
extern "C" {
    pub fn __log10(__x: f64) -> f64;
}
extern "C" {
    pub fn modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn __modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn __expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn __log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn logb(__x: f64) -> f64;
}
extern "C" {
    pub fn __logb(__x: f64) -> f64;
}
extern "C" {
    pub fn exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn log2(__x: f64) -> f64;
}
extern "C" {
    pub fn __log2(__x: f64) -> f64;
}
extern "C" {
    pub fn pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn __ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn __fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn floor(__x: f64) -> f64;
}
extern "C" {
    pub fn __floor(__x: f64) -> f64;
}
extern "C" {
    pub fn fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn significand(__x: f64) -> f64;
}
extern "C" {
    pub fn __significand(__x: f64) -> f64;
}
extern "C" {
    pub fn copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn rint(__x: f64) -> f64;
}
extern "C" {
    pub fn __rint(__x: f64) -> f64;
}
extern "C" {
    pub fn nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nexttoward(__x: f64, __y: u128) -> f64;
}
extern "C" {
    pub fn __nexttoward(__x: f64, __y: u128) -> f64;
}
extern "C" {
    pub fn remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn __scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn __nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn round(__x: f64) -> f64;
}
extern "C" {
    pub fn __round(__x: f64) -> f64;
}
extern "C" {
    pub fn trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn __trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn __fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __fpclassifyf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsigf(__x: f32, __y: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignalingf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn __atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn expf(__x: f32) -> f32;
}
extern "C" {
    pub fn __expf(__x: f32) -> f32;
}
extern "C" {
    pub fn frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn logf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logf(__x: f32) -> f32;
}
extern "C" {
    pub fn log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn __modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn __expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn __log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn __ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn __fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn __floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn __significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn __nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nexttowardf(__x: f32, __y: u128) -> f32;
}
extern "C" {
    pub fn __nexttowardf(__x: f32, __y: u128) -> f32;
}
extern "C" {
    pub fn remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn __scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn __roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn __truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn __fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __fpclassifyl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinfl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitel(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnanl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsigl(__x: u128, __y: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignalingl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosl(__x: u128) -> u128;
}
extern "C" {
    pub fn __acosl(__x: u128) -> u128;
}
extern "C" {
    pub fn asinl(__x: u128) -> u128;
}
extern "C" {
    pub fn __asinl(__x: u128) -> u128;
}
extern "C" {
    pub fn atanl(__x: u128) -> u128;
}
extern "C" {
    pub fn __atanl(__x: u128) -> u128;
}
extern "C" {
    pub fn atan2l(__y: u128, __x: u128) -> u128;
}
extern "C" {
    pub fn __atan2l(__y: u128, __x: u128) -> u128;
}
extern "C" {
    pub fn cosl(__x: u128) -> u128;
}
extern "C" {
    pub fn __cosl(__x: u128) -> u128;
}
extern "C" {
    pub fn sinl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sinl(__x: u128) -> u128;
}
extern "C" {
    pub fn tanl(__x: u128) -> u128;
}
extern "C" {
    pub fn __tanl(__x: u128) -> u128;
}
extern "C" {
    pub fn coshl(__x: u128) -> u128;
}
extern "C" {
    pub fn __coshl(__x: u128) -> u128;
}
extern "C" {
    pub fn sinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn tanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __tanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn acoshl(__x: u128) -> u128;
}
extern "C" {
    pub fn __acoshl(__x: u128) -> u128;
}
extern "C" {
    pub fn asinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __asinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn atanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __atanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn expl(__x: u128) -> u128;
}
extern "C" {
    pub fn __expl(__x: u128) -> u128;
}
extern "C" {
    pub fn frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn logl(__x: u128) -> u128;
}
extern "C" {
    pub fn __logl(__x: u128) -> u128;
}
extern "C" {
    pub fn log10l(__x: u128) -> u128;
}
extern "C" {
    pub fn __log10l(__x: u128) -> u128;
}
extern "C" {
    pub fn modfl(__x: u128, __iptr: *mut u128) -> u128;
}
extern "C" {
    pub fn __modfl(__x: u128, __iptr: *mut u128) -> u128;
}
extern "C" {
    pub fn expm1l(__x: u128) -> u128;
}
extern "C" {
    pub fn __expm1l(__x: u128) -> u128;
}
extern "C" {
    pub fn log1pl(__x: u128) -> u128;
}
extern "C" {
    pub fn __log1pl(__x: u128) -> u128;
}
extern "C" {
    pub fn logbl(__x: u128) -> u128;
}
extern "C" {
    pub fn __logbl(__x: u128) -> u128;
}
extern "C" {
    pub fn exp2l(__x: u128) -> u128;
}
extern "C" {
    pub fn __exp2l(__x: u128) -> u128;
}
extern "C" {
    pub fn log2l(__x: u128) -> u128;
}
extern "C" {
    pub fn __log2l(__x: u128) -> u128;
}
extern "C" {
    pub fn powl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __powl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn sqrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sqrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn hypotl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __hypotl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn cbrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn __cbrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn ceill(__x: u128) -> u128;
}
extern "C" {
    pub fn __ceill(__x: u128) -> u128;
}
extern "C" {
    pub fn fabsl(__x: u128) -> u128;
}
extern "C" {
    pub fn __fabsl(__x: u128) -> u128;
}
extern "C" {
    pub fn floorl(__x: u128) -> u128;
}
extern "C" {
    pub fn __floorl(__x: u128) -> u128;
}
extern "C" {
    pub fn fmodl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fmodl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn isinfl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitel(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dreml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __dreml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn significandl(__x: u128) -> u128;
}
extern "C" {
    pub fn __significandl(__x: u128) -> u128;
}
extern "C" {
    pub fn copysignl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __copysignl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
}
extern "C" {
    pub fn __nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
}
extern "C" {
    pub fn isnanl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __j0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn j1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __j1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn jnl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn __jnl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn y0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __y0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn y1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __y1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn ynl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn __ynl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn __erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn __erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn gammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __gammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammal_r(arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __lgammal_r(arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn rintl(__x: u128) -> u128;
}
extern "C" {
    pub fn __rintl(__x: u128) -> u128;
}
extern "C" {
    pub fn nextafterl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __nextafterl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn nexttowardl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __nexttowardl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn remainderl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __remainderl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn ilogbl(__x: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbl(__x: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
}
extern "C" {
    pub fn __scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
}
extern "C" {
    pub fn nearbyintl(__x: u128) -> u128;
}
extern "C" {
    pub fn __nearbyintl(__x: u128) -> u128;
}
extern "C" {
    pub fn roundl(__x: u128) -> u128;
}
extern "C" {
    pub fn __roundl(__x: u128) -> u128;
}
extern "C" {
    pub fn truncl(__x: u128) -> u128;
}
extern "C" {
    pub fn __truncl(__x: u128) -> u128;
}
extern "C" {
    pub fn remquol(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __remquol(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn lrintl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdiml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fdiml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fmaxl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fmaxl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fminl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fminl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
extern "C" {
    pub fn __fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
extern "C" {
    pub fn scalbl(__x: u128, __n: u128) -> u128;
}
extern "C" {
    pub fn __scalbl(__x: u128, __n: u128) -> u128;
}
extern "C" {
    pub static mut signgam: ::std::os::raw::c_int;
}
//pub const FP_NAN: _bindgen_ty_1 = 0;
//pub const FP_INFINITE: _bindgen_ty_1 = 1;
//pub const FP_ZERO: _bindgen_ty_1 = 2;
//pub const FP_SUBNORMAL: _bindgen_ty_1 = 3;
//pub const FP_NORMAL: _bindgen_ty_1 = 4;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    const UNINIT: ::std::mem::MaybeUninit<__sigset_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    const UNINIT: ::std::mem::MaybeUninit<timeval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<timespec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<fd_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fds_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___atomic_wide_counter__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__atomic_wide_counter__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__atomic_wide_counter__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___atomic_wide_counter() {
    const UNINIT: ::std::mem::MaybeUninit<__atomic_wide_counter> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Alignment of ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value32)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_list> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__prev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_slist> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_mutex_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__owner) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__nusers) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__kind) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spins) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__elision) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__list) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_rwlock_arch_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__readers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writers) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrphase_futex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writers_futex) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad3) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad4) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cur_writer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__shared) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rwelision) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__flags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wseq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_refs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_orig_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrefs) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_signals) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___once_flag() {
    const UNINIT: ::std::mem::MaybeUninit<__once_flag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__once_flag>(),
        4usize,
        concat!("Size of: ", stringify!(__once_flag))
    );
    assert_eq!(
        ::std::mem::align_of::<__once_flag>(),
        4usize,
        concat!("Alignment of ", stringify!(__once_flag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__once_flag),
            "::",
            stringify!(__data)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutexattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_condattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_attr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutex_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_cond_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlock_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlockattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrier_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrierattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub const gd_entype_t_GD_NO_ENTRY: gd_entype_t = 0;
pub const gd_entype_t_GD_RAW_ENTRY: gd_entype_t = 1;
pub const gd_entype_t_GD_LINCOM_ENTRY: gd_entype_t = 2;
pub const gd_entype_t_GD_LINTERP_ENTRY: gd_entype_t = 3;
pub const gd_entype_t_GD_BIT_ENTRY: gd_entype_t = 4;
pub const gd_entype_t_GD_MULTIPLY_ENTRY: gd_entype_t = 5;
pub const gd_entype_t_GD_PHASE_ENTRY: gd_entype_t = 6;
pub const gd_entype_t_GD_INDEX_ENTRY: gd_entype_t = 7;
pub const gd_entype_t_GD_POLYNOM_ENTRY: gd_entype_t = 8;
pub const gd_entype_t_GD_SBIT_ENTRY: gd_entype_t = 9;
pub const gd_entype_t_GD_DIVIDE_ENTRY: gd_entype_t = 10;
pub const gd_entype_t_GD_RECIP_ENTRY: gd_entype_t = 11;
pub const gd_entype_t_GD_WINDOW_ENTRY: gd_entype_t = 12;
pub const gd_entype_t_GD_MPLEX_ENTRY: gd_entype_t = 13;
pub const gd_entype_t_GD_INDIR_ENTRY: gd_entype_t = 14;
pub const gd_entype_t_GD_SINDIR_ENTRY: gd_entype_t = 15;
pub const gd_entype_t_GD_CONST_ENTRY: gd_entype_t = 16;
pub const gd_entype_t_GD_STRING_ENTRY: gd_entype_t = 17;
pub const gd_entype_t_GD_CARRAY_ENTRY: gd_entype_t = 18;
pub const gd_entype_t_GD_SARRAY_ENTRY: gd_entype_t = 19;
pub const gd_entype_t_GD_ALIAS_ENTRY: gd_entype_t = -1;
pub type gd_entype_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<imaxdiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
pub type gd_shift_t = i64;
pub const gd_type_t_GD_NULL: gd_type_t = 0;
pub const gd_type_t_GD_UNKNOWN: gd_type_t = 4000;
pub const gd_type_t_GD_UINT8: gd_type_t = 1;
pub const gd_type_t_GD_INT8: gd_type_t = 33;
pub const gd_type_t_GD_UINT16: gd_type_t = 2;
pub const gd_type_t_GD_INT16: gd_type_t = 34;
pub const gd_type_t_GD_UINT32: gd_type_t = 4;
pub const gd_type_t_GD_INT32: gd_type_t = 36;
pub const gd_type_t_GD_UINT64: gd_type_t = 8;
pub const gd_type_t_GD_INT64: gd_type_t = 40;
pub const gd_type_t_GD_FLOAT32: gd_type_t = 132;
pub const gd_type_t_GD_FLOAT64: gd_type_t = 136;
pub const gd_type_t_GD_COMPLEX64: gd_type_t = 264;
pub const gd_type_t_GD_COMPLEX128: gd_type_t = 272;
pub const gd_type_t_GD_STRING: gd_type_t = 520;
pub type gd_type_t = ::std::os::raw::c_uint;
pub const gd_windop_t_GD_WINDOP_UNK: gd_windop_t = 0;
pub const gd_windop_t_GD_WINDOP_EQ: gd_windop_t = 1;
pub const gd_windop_t_GD_WINDOP_GE: gd_windop_t = 2;
pub const gd_windop_t_GD_WINDOP_GT: gd_windop_t = 3;
pub const gd_windop_t_GD_WINDOP_LE: gd_windop_t = 4;
pub const gd_windop_t_GD_WINDOP_LT: gd_windop_t = 5;
pub const gd_windop_t_GD_WINDOP_NE: gd_windop_t = 6;
pub const gd_windop_t_GD_WINDOP_SET: gd_windop_t = 7;
pub const gd_windop_t_GD_WINDOP_CLR: gd_windop_t = 8;
pub type gd_windop_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gd_private_entry_ {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gd_triplet_t {
    pub i: i64,
    pub u: u64,
    pub r: f64,
}
#[test]
fn bindgen_test_layout_gd_triplet_t() {
    const UNINIT: ::std::mem::MaybeUninit<gd_triplet_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<gd_triplet_t>(),
        8usize,
        concat!("Size of: ", stringify!(gd_triplet_t))
    );
    assert_eq!(
        ::std::mem::align_of::<gd_triplet_t>(),
        8usize,
        concat!("Alignment of ", stringify!(gd_triplet_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).i) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_triplet_t),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_triplet_t),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_triplet_t),
            "::",
            stringify!(r)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct gd_unified_entry_ {
    pub field: *mut ::std::os::raw::c_char,
    pub field_type: gd_entype_t,
    pub in_fields: [*mut ::std::os::raw::c_char; 3usize],
    pub scalar: [*mut ::std::os::raw::c_char; 6usize],
    pub scalar_ind: [::std::os::raw::c_int; 6usize],
    pub fragment_index: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_uint,
    pub __bindgen_anon_1: gd_unified_entry___bindgen_ty_1,
    pub e: *mut gd_private_entry_,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gd_unified_entry___bindgen_ty_1 {
    pub __bindgen_anon_1: gd_unified_entry___bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: gd_unified_entry___bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: gd_unified_entry___bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: gd_unified_entry___bindgen_ty_1__bindgen_ty_4,
    pub __bindgen_anon_5: gd_unified_entry___bindgen_ty_1__bindgen_ty_5,
    pub __bindgen_anon_6: gd_unified_entry___bindgen_ty_1__bindgen_ty_6,
    pub __bindgen_anon_7: gd_unified_entry___bindgen_ty_1__bindgen_ty_7,
    pub __bindgen_anon_8: gd_unified_entry___bindgen_ty_1__bindgen_ty_8,
    pub __bindgen_anon_9: gd_unified_entry___bindgen_ty_1__bindgen_ty_9,
    pub __bindgen_anon_10: gd_unified_entry___bindgen_ty_1__bindgen_ty_10,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gd_unified_entry___bindgen_ty_1__bindgen_ty_1 {
    pub spf: ::std::os::raw::c_uint,
    pub data_type: gd_type_t,
}
#[test]
fn bindgen_test_layout_gd_unified_entry___bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<gd_unified_entry___bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<gd_unified_entry___bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<gd_unified_entry___bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(spf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_type) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(data_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gd_unified_entry___bindgen_ty_1__bindgen_ty_2 {
    pub n_fields: ::std::os::raw::c_int,
    pub m: [f64; 3usize],
    pub cm: [__BindgenComplex<f64>; 3usize],
    pub b: [f64; 3usize],
    pub cb: [__BindgenComplex<f64>; 3usize],
}
#[test]
fn bindgen_test_layout_gd_unified_entry___bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<gd_unified_entry___bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<gd_unified_entry___bindgen_ty_1__bindgen_ty_2>(),
        152usize,
        concat!(
            "Size of: ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<gd_unified_entry___bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_fields) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(n_fields)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(m)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cm) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(cm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(cb)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gd_unified_entry___bindgen_ty_1__bindgen_ty_3 {
    pub bitnum: ::std::os::raw::c_int,
    pub numbits: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_gd_unified_entry___bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<gd_unified_entry___bindgen_ty_1__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<gd_unified_entry___bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<gd_unified_entry___bindgen_ty_1__bindgen_ty_3>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bitnum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(bitnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numbits) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(numbits)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gd_unified_entry___bindgen_ty_1__bindgen_ty_4 {
    pub poly_ord: ::std::os::raw::c_int,
    pub a: [f64; 6usize],
    pub ca: [__BindgenComplex<f64>; 6usize],
}
#[test]
fn bindgen_test_layout_gd_unified_entry___bindgen_ty_1__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<gd_unified_entry___bindgen_ty_1__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<gd_unified_entry___bindgen_ty_1__bindgen_ty_4>(),
        152usize,
        concat!(
            "Size of: ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<gd_unified_entry___bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).poly_ord) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(poly_ord)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ca) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(ca)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gd_unified_entry___bindgen_ty_1__bindgen_ty_5 {
    pub dividend: f64,
    pub cdividend: __BindgenComplex<f64>,
}
#[test]
fn bindgen_test_layout_gd_unified_entry___bindgen_ty_1__bindgen_ty_5() {
    const UNINIT: ::std::mem::MaybeUninit<gd_unified_entry___bindgen_ty_1__bindgen_ty_5> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<gd_unified_entry___bindgen_ty_1__bindgen_ty_5>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<gd_unified_entry___bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dividend) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(dividend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cdividend) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(cdividend)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gd_unified_entry___bindgen_ty_1__bindgen_ty_6 {
    pub table: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_gd_unified_entry___bindgen_ty_1__bindgen_ty_6() {
    const UNINIT: ::std::mem::MaybeUninit<gd_unified_entry___bindgen_ty_1__bindgen_ty_6> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<gd_unified_entry___bindgen_ty_1__bindgen_ty_6>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<gd_unified_entry___bindgen_ty_1__bindgen_ty_6>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).table) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(table)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gd_unified_entry___bindgen_ty_1__bindgen_ty_7 {
    pub shift: i64,
}
#[test]
fn bindgen_test_layout_gd_unified_entry___bindgen_ty_1__bindgen_ty_7() {
    const UNINIT: ::std::mem::MaybeUninit<gd_unified_entry___bindgen_ty_1__bindgen_ty_7> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<gd_unified_entry___bindgen_ty_1__bindgen_ty_7>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<gd_unified_entry___bindgen_ty_1__bindgen_ty_7>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shift) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(shift)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct gd_unified_entry___bindgen_ty_1__bindgen_ty_8 {
    pub windop: gd_windop_t,
    pub threshold: gd_triplet_t,
}
#[test]
fn bindgen_test_layout_gd_unified_entry___bindgen_ty_1__bindgen_ty_8() {
    const UNINIT: ::std::mem::MaybeUninit<gd_unified_entry___bindgen_ty_1__bindgen_ty_8> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<gd_unified_entry___bindgen_ty_1__bindgen_ty_8>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_8)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<gd_unified_entry___bindgen_ty_1__bindgen_ty_8>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).windop) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(windop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).threshold) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(threshold)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gd_unified_entry___bindgen_ty_1__bindgen_ty_9 {
    pub count_val: ::std::os::raw::c_int,
    pub period: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_gd_unified_entry___bindgen_ty_1__bindgen_ty_9() {
    const UNINIT: ::std::mem::MaybeUninit<gd_unified_entry___bindgen_ty_1__bindgen_ty_9> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<gd_unified_entry___bindgen_ty_1__bindgen_ty_9>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_9)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<gd_unified_entry___bindgen_ty_1__bindgen_ty_9>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count_val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_9),
            "::",
            stringify!(count_val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).period) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_9),
            "::",
            stringify!(period)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gd_unified_entry___bindgen_ty_1__bindgen_ty_10 {
    pub const_type: gd_type_t,
    pub array_len: usize,
}
#[test]
fn bindgen_test_layout_gd_unified_entry___bindgen_ty_1__bindgen_ty_10() {
    const UNINIT: ::std::mem::MaybeUninit<gd_unified_entry___bindgen_ty_1__bindgen_ty_10> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<gd_unified_entry___bindgen_ty_1__bindgen_ty_10>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_10)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<gd_unified_entry___bindgen_ty_1__bindgen_ty_10>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).const_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_10),
            "::",
            stringify!(const_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).array_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_unified_entry___bindgen_ty_1__bindgen_ty_10),
            "::",
            stringify!(array_len)
        )
    );
}
#[test]
fn bindgen_test_layout_gd_unified_entry___bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<gd_unified_entry___bindgen_ty_1>(),
        152usize,
        concat!("Size of: ", stringify!(gd_unified_entry___bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<gd_unified_entry___bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(gd_unified_entry___bindgen_ty_1))
    );
}
#[test]
fn bindgen_test_layout_gd_unified_entry_() {
    const UNINIT: ::std::mem::MaybeUninit<gd_unified_entry_> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<gd_unified_entry_>(),
        280usize,
        concat!("Size of: ", stringify!(gd_unified_entry_))
    );
    assert_eq!(
        ::std::mem::align_of::<gd_unified_entry_>(),
        8usize,
        concat!("Alignment of ", stringify!(gd_unified_entry_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_unified_entry_),
            "::",
            stringify!(field)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field_type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_unified_entry_),
            "::",
            stringify!(field_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).in_fields) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_unified_entry_),
            "::",
            stringify!(in_fields)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scalar) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_unified_entry_),
            "::",
            stringify!(scalar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scalar_ind) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_unified_entry_),
            "::",
            stringify!(scalar_ind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fragment_index) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_unified_entry_),
            "::",
            stringify!(fragment_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_unified_entry_),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_unified_entry_),
            "::",
            stringify!(e)
        )
    );
}
pub type gd_entry_t = gd_unified_entry_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gd_dirfile_ {
    _unused: [u8; 0],
}
pub type DIRFILE = gd_dirfile_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gd_callback_data_ {
    pub dirfile: *const DIRFILE,
    pub suberror: ::std::os::raw::c_int,
    pub linenum: ::std::os::raw::c_int,
    pub filename: *const ::std::os::raw::c_char,
    pub line: *mut ::std::os::raw::c_char,
    pub buflen: usize,
}
#[test]
fn bindgen_test_layout_gd_callback_data_() {
    const UNINIT: ::std::mem::MaybeUninit<gd_callback_data_> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<gd_callback_data_>(),
        40usize,
        concat!("Size of: ", stringify!(gd_callback_data_))
    );
    assert_eq!(
        ::std::mem::align_of::<gd_callback_data_>(),
        8usize,
        concat!("Alignment of ", stringify!(gd_callback_data_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dirfile) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_callback_data_),
            "::",
            stringify!(dirfile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suberror) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_callback_data_),
            "::",
            stringify!(suberror)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linenum) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_callback_data_),
            "::",
            stringify!(linenum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filename) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_callback_data_),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_callback_data_),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buflen) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_callback_data_),
            "::",
            stringify!(buflen)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gd_carray_data_ {
    pub n: usize,
    pub d: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_gd_carray_data_() {
    const UNINIT: ::std::mem::MaybeUninit<gd_carray_data_> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<gd_carray_data_>(),
        16usize,
        concat!("Size of: ", stringify!(gd_carray_data_))
    );
    assert_eq!(
        ::std::mem::align_of::<gd_carray_data_>(),
        8usize,
        concat!("Alignment of ", stringify!(gd_carray_data_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_carray_data_),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gd_carray_data_),
            "::",
            stringify!(d)
        )
    );
}
pub type gd_carray_t = gd_carray_data_;
pub type gd_parser_data_t = gd_callback_data_;
pub type gd_parser_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut gd_parser_data_t,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn gd_alloc_funcs(
        malloc_func: ::std::option::Option<
            unsafe extern "C" fn(arg1: usize) -> *mut ::std::os::raw::c_void,
        >,
        free_func: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn gd_add_alias(
        dirfile: *mut DIRFILE,
        alias_name: *const ::std::os::raw::c_char,
        target_code: *const ::std::os::raw::c_char,
        fragment_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_add_bit(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        in_field: *const ::std::os::raw::c_char,
        bitnum: ::std::os::raw::c_int,
        numbits: ::std::os::raw::c_int,
        fragment_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_add_clincom(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        n_fields: ::std::os::raw::c_int,
        in_fields: *mut *const ::std::os::raw::c_char,
        cm: *const __BindgenComplex<f64>,
        cb: *const __BindgenComplex<f64>,
        fragment_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_add_carray(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        const_type: gd_type_t,
        array_len: usize,
        data_type: gd_type_t,
        values: *const ::std::os::raw::c_void,
        fragment_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_add_const(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        const_type: gd_type_t,
        data_type: gd_type_t,
        value: *const ::std::os::raw::c_void,
        fragment_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_add_cpolynom(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        poly_ord: ::std::os::raw::c_int,
        in_field: *const ::std::os::raw::c_char,
        ca: *const __BindgenComplex<f64>,
        fragment_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_add_crecip(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        in_field: *const ::std::os::raw::c_char,
        cdividend: __BindgenComplex<f64>,
        fragment_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_add_crecip89(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        in_field: *const ::std::os::raw::c_char,
        cdividend: *const f64,
        fragment_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_add_divide(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        in_field1: *const ::std::os::raw::c_char,
        in_field2: *const ::std::os::raw::c_char,
        fragment_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_add_indir(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        in_field1: *const ::std::os::raw::c_char,
        in_field2: *const ::std::os::raw::c_char,
        fragment_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_add_lincom(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        n_fields: ::std::os::raw::c_int,
        in_fields: *mut *const ::std::os::raw::c_char,
        m: *const f64,
        b: *const f64,
        fragment_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_add_linterp(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        in_field: *const ::std::os::raw::c_char,
        table: *const ::std::os::raw::c_char,
        fragment_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_add_mplex(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        in_field: *const ::std::os::raw::c_char,
        count_field: *const ::std::os::raw::c_char,
        count_val: ::std::os::raw::c_int,
        period: ::std::os::raw::c_int,
        fragment_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_add_multiply(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        in_field1: *const ::std::os::raw::c_char,
        in_field2: *const ::std::os::raw::c_char,
        fragment_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_add_phase(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        in_field: *const ::std::os::raw::c_char,
        shift: i64,
        fragment_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_add_polynom(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        poly_ord: ::std::os::raw::c_int,
        in_field: *const ::std::os::raw::c_char,
        a: *const f64,
        fragment_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_add_recip(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        in_field: *const ::std::os::raw::c_char,
        dividend: f64,
        fragment_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_add_sarray(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        array_len: usize,
        values: *mut *const ::std::os::raw::c_char,
        fragment_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_add_sbit(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        in_field: *const ::std::os::raw::c_char,
        bitnum: ::std::os::raw::c_int,
        numbits: ::std::os::raw::c_int,
        fragment_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_add_sindir(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        in_field1: *const ::std::os::raw::c_char,
        in_field2: *const ::std::os::raw::c_char,
        fragment_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_add_string(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        fragment_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_add_window(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        in_field: *const ::std::os::raw::c_char,
        check_field: *const ::std::os::raw::c_char,
        windop: gd_windop_t,
        threshold: gd_triplet_t,
        fragment_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_alias_target(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn gd_aliases(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
    ) -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn gd_alter_affixes(
        dirfile: *mut DIRFILE,
        index: ::std::os::raw::c_int,
        prefix: *const ::std::os::raw::c_char,
        suffix: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_alter_bit(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        in_field: *const ::std::os::raw::c_char,
        bitnum: ::std::os::raw::c_int,
        numbits: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_alter_carray(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        const_type: gd_type_t,
        array_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_alter_clincom(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        n_fields: ::std::os::raw::c_int,
        in_fields: *mut *const ::std::os::raw::c_char,
        m: *const __BindgenComplex<f64>,
        b: *const __BindgenComplex<f64>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_alter_const(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        const_type: gd_type_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_alter_cpolynom(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        poly_ord: ::std::os::raw::c_int,
        in_field: *const ::std::os::raw::c_char,
        a: *const __BindgenComplex<f64>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_alter_crecip(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        in_field: *const ::std::os::raw::c_char,
        cdividend: __BindgenComplex<f64>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_alter_crecip89(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        in_field: *const ::std::os::raw::c_char,
        cdividend: *const f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_alter_divide(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        in_field1: *const ::std::os::raw::c_char,
        in_field2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_alter_indir(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        in_field1: *const ::std::os::raw::c_char,
        in_field2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_alter_lincom(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        n_fields: ::std::os::raw::c_int,
        in_fields: *mut *const ::std::os::raw::c_char,
        m: *const f64,
        b: *const f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_alter_mplex(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        in_field: *const ::std::os::raw::c_char,
        count_field: *const ::std::os::raw::c_char,
        count_val: ::std::os::raw::c_int,
        period: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_alter_multiply(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        in_field1: *const ::std::os::raw::c_char,
        in_field2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_alter_phase(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        in_field: *const ::std::os::raw::c_char,
        shift: i64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_alter_polynom(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        poly_ord: ::std::os::raw::c_int,
        in_field: *const ::std::os::raw::c_char,
        a: *const f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_alter_recip(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        in_field: *const ::std::os::raw::c_char,
        cdividend: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_alter_sarray(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        array_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_alter_sbit(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        in_field: *const ::std::os::raw::c_char,
        bitnum: ::std::os::raw::c_int,
        numbits: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_alter_sindir(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        in_field1: *const ::std::os::raw::c_char,
        in_field2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_alter_window(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        in_field: *const ::std::os::raw::c_char,
        check_field: *const ::std::os::raw::c_char,
        windop: gd_windop_t,
        threshold: gd_triplet_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_array_len(dirfile: *mut DIRFILE, field_code: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn gd_carray_len(dirfile: *mut DIRFILE, field_code: *const ::std::os::raw::c_char)
        -> usize;
}
extern "C" {
    pub fn gd_get_carray(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        return_type: gd_type_t,
        data_out: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_get_carray_slice(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        start: ::std::os::raw::c_ulong,
        n: usize,
        return_type: gd_type_t,
        data_out: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_put_carray(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        data_type: gd_type_t,
        data_in: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_put_carray_slice(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        first: ::std::os::raw::c_ulong,
        n: usize,
        data_type: gd_type_t,
        data_in: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_get_constant(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        return_type: gd_type_t,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_put_constant(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        data_type: gd_type_t,
        data: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_constants(
        dirfile: *mut DIRFILE,
        return_type: gd_type_t,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn gd_carrays(dirfile: *mut DIRFILE, return_type: gd_type_t) -> *const gd_carray_t;
}
extern "C" {
    pub fn gd_encoding(
        dirfile: *mut DIRFILE,
        fragment: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn gd_encoding_support(encoding: ::std::os::raw::c_ulong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_endianness(
        dirfile: *mut DIRFILE,
        fragment: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn gd_entry(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        entry: *mut gd_entry_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_entry_list(
        dirfile: *mut DIRFILE,
        parent: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn gd_entry_type(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
    ) -> gd_entype_t;
}
extern "C" {
    pub fn gd_error(dirfile: *const DIRFILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_error_count(dirfile: *mut DIRFILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_error_string(
        dirfile: *const DIRFILE,
        buffer: *mut ::std::os::raw::c_char,
        buflen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gd_field_list(dirfile: *mut DIRFILE) -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn gd_field_list_by_type(
        dirfile: *mut DIRFILE,
        type_: gd_entype_t,
    ) -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn gd_flags(
        D: *mut DIRFILE,
        set: ::std::os::raw::c_ulong,
        resest: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn gd_fragment_affixes(
        dirfile: *mut DIRFILE,
        index: ::std::os::raw::c_int,
        prefix: *mut *mut ::std::os::raw::c_char,
        suffix: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_fragment_index(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_fragmentname(
        dirfile: *mut DIRFILE,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn gd_fragment_namespace(
        D: *mut DIRFILE,
        index: ::std::os::raw::c_int,
        ns: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn gd_free_entry_strings(entry: *mut gd_entry_t) -> *mut gd_entry_t;
}
extern "C" {
    pub fn gd_hidden(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_hide(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_invalid_dirfile() -> *mut DIRFILE;
}
extern "C" {
    pub fn gd_linterp_tablename(
        D: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gd_madd(
        dirfile: *mut DIRFILE,
        entry: *const gd_entry_t,
        parent: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_madd_alias(
        dirfile: *mut DIRFILE,
        parent: *const ::std::os::raw::c_char,
        alias_name: *const ::std::os::raw::c_char,
        target_code: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_madd_bit(
        dirfile: *mut DIRFILE,
        parent: *const ::std::os::raw::c_char,
        field_code: *const ::std::os::raw::c_char,
        in_field: *const ::std::os::raw::c_char,
        bitnum: ::std::os::raw::c_int,
        numbits: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_madd_carray(
        dirfile: *mut DIRFILE,
        parent: *const ::std::os::raw::c_char,
        field_code: *const ::std::os::raw::c_char,
        const_type: gd_type_t,
        array_len: usize,
        data_type: gd_type_t,
        values: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_madd_clincom(
        dirfile: *mut DIRFILE,
        parent: *const ::std::os::raw::c_char,
        field_code: *const ::std::os::raw::c_char,
        n_fields: ::std::os::raw::c_int,
        in_fields: *mut *const ::std::os::raw::c_char,
        cm: *const __BindgenComplex<f64>,
        cb: *const __BindgenComplex<f64>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_madd_const(
        dirfile: *mut DIRFILE,
        parent: *const ::std::os::raw::c_char,
        field_code: *const ::std::os::raw::c_char,
        const_type: gd_type_t,
        data_type: gd_type_t,
        value: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_madd_cpolynom(
        dirfile: *mut DIRFILE,
        parent: *const ::std::os::raw::c_char,
        field_code: *const ::std::os::raw::c_char,
        poly_ord: ::std::os::raw::c_int,
        in_field: *const ::std::os::raw::c_char,
        ca: *const __BindgenComplex<f64>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_madd_crecip(
        dirfile: *mut DIRFILE,
        parent: *const ::std::os::raw::c_char,
        field_code: *const ::std::os::raw::c_char,
        in_field: *const ::std::os::raw::c_char,
        cdividend: __BindgenComplex<f64>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_madd_crecip89(
        dirfile: *mut DIRFILE,
        parent: *const ::std::os::raw::c_char,
        field_code: *const ::std::os::raw::c_char,
        in_field: *const ::std::os::raw::c_char,
        cdividend: *const f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_madd_divide(
        dirfile: *mut DIRFILE,
        parent: *const ::std::os::raw::c_char,
        field_code: *const ::std::os::raw::c_char,
        in_field1: *const ::std::os::raw::c_char,
        in_field2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_madd_indir(
        dirfile: *mut DIRFILE,
        parent: *const ::std::os::raw::c_char,
        field_code: *const ::std::os::raw::c_char,
        in_field1: *const ::std::os::raw::c_char,
        in_field2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_madd_lincom(
        dirfile: *mut DIRFILE,
        parent: *const ::std::os::raw::c_char,
        field_code: *const ::std::os::raw::c_char,
        n_fields: ::std::os::raw::c_int,
        in_fields: *mut *const ::std::os::raw::c_char,
        m: *const f64,
        b: *const f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_madd_linterp(
        dirfile: *mut DIRFILE,
        parent: *const ::std::os::raw::c_char,
        field_code: *const ::std::os::raw::c_char,
        in_field: *const ::std::os::raw::c_char,
        table: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_madd_mplex(
        dirfile: *mut DIRFILE,
        parent: *const ::std::os::raw::c_char,
        field_code: *const ::std::os::raw::c_char,
        in_field: *const ::std::os::raw::c_char,
        count_field: *const ::std::os::raw::c_char,
        count_val: ::std::os::raw::c_int,
        period: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_madd_multiply(
        dirfile: *mut DIRFILE,
        parent: *const ::std::os::raw::c_char,
        field_code: *const ::std::os::raw::c_char,
        in_field1: *const ::std::os::raw::c_char,
        in_field2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_madd_phase(
        dirfile: *mut DIRFILE,
        parent: *const ::std::os::raw::c_char,
        field_code: *const ::std::os::raw::c_char,
        in_field: *const ::std::os::raw::c_char,
        shift: i64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_madd_polynom(
        dirfile: *mut DIRFILE,
        parent: *const ::std::os::raw::c_char,
        field_code: *const ::std::os::raw::c_char,
        poly_ord: ::std::os::raw::c_int,
        in_field: *const ::std::os::raw::c_char,
        a: *const f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_madd_recip(
        dirfile: *mut DIRFILE,
        parent: *const ::std::os::raw::c_char,
        field_code: *const ::std::os::raw::c_char,
        in_field: *const ::std::os::raw::c_char,
        dividend: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_madd_sarray(
        dirfile: *mut DIRFILE,
        parent: *const ::std::os::raw::c_char,
        field_code: *const ::std::os::raw::c_char,
        array_len: usize,
        values: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_madd_sbit(
        dirfile: *mut DIRFILE,
        parent: *const ::std::os::raw::c_char,
        field_code: *const ::std::os::raw::c_char,
        in_field: *const ::std::os::raw::c_char,
        bitnum: ::std::os::raw::c_int,
        numbits: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_madd_sindir(
        dirfile: *mut DIRFILE,
        parent: *const ::std::os::raw::c_char,
        field_code: *const ::std::os::raw::c_char,
        in_field1: *const ::std::os::raw::c_char,
        in_field2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_madd_spec(
        dirfile: *mut DIRFILE,
        line: *const ::std::os::raw::c_char,
        parent: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_madd_string(
        dirfile: *mut DIRFILE,
        parent: *const ::std::os::raw::c_char,
        field_code: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_madd_window(
        dirfile: *mut DIRFILE,
        parent: *const ::std::os::raw::c_char,
        field_code: *const ::std::os::raw::c_char,
        in_field: *const ::std::os::raw::c_char,
        check_field: *const ::std::os::raw::c_char,
        windop: gd_windop_t,
        threshold: gd_triplet_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_match_entries(
        D: *mut DIRFILE,
        regex: *const ::std::os::raw::c_char,
        fragment: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
        list: *mut *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gd_dirfile_standards(
        dirfile: *mut DIRFILE,
        vers: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_mconstants(
        dirfile: *mut DIRFILE,
        parent: *const ::std::os::raw::c_char,
        return_type: gd_type_t,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn gd_mcarrays(
        dirfile: *mut DIRFILE,
        parent: *const ::std::os::raw::c_char,
        return_type: gd_type_t,
    ) -> *const gd_carray_t;
}
extern "C" {
    pub fn gd_mfield_list(
        dirfile: *mut DIRFILE,
        parent: *const ::std::os::raw::c_char,
    ) -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn gd_mfield_list_by_type(
        dirfile: *mut DIRFILE,
        parent: *const ::std::os::raw::c_char,
        type_: gd_entype_t,
    ) -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn gd_mplex_lookback(dirfile: *mut DIRFILE, lookback: ::std::os::raw::c_int);
}
extern "C" {
    pub fn gd_msarrays(
        dirfile: *mut DIRFILE,
        parent: *const ::std::os::raw::c_char,
    ) -> *mut *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn gd_mstrings(
        dirfile: *mut DIRFILE,
        parent: *const ::std::os::raw::c_char,
    ) -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn gd_mvector_list(
        dirfile: *mut DIRFILE,
        parent: *const ::std::os::raw::c_char,
    ) -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn gd_dirfilename(dirfile: *mut DIRFILE) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn gd_naliases(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gd_native_type(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
    ) -> gd_type_t;
}
extern "C" {
    pub fn gd_nentries(
        D: *mut DIRFILE,
        parent: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gd_nfields(dirfile: *mut DIRFILE) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gd_nfields_by_type(dirfile: *mut DIRFILE, type_: gd_entype_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gd_nfragments(dirfile: *mut DIRFILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_nmfields(
        dirfile: *mut DIRFILE,
        parent: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gd_nmfields_by_type(
        dirfile: *mut DIRFILE,
        parent: *const ::std::os::raw::c_char,
        type_: gd_entype_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gd_nmvectors(
        dirfile: *mut DIRFILE,
        parent: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gd_nvectors(dirfile: *mut DIRFILE) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gd_parent_fragment(
        dirfile: *mut DIRFILE,
        fragment_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_parser_callback(
        dirfile: *mut DIRFILE,
        sehandler: gd_parser_callback_t,
        arg1: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn gd_alter_protection(
        dirfile: *mut DIRFILE,
        protection_level: ::std::os::raw::c_int,
        fragment_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_protection(
        dirfile: *mut DIRFILE,
        fragment_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_raw_filename(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gd_reference(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn gd_get_sarray(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        data_out: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_get_sarray_slice(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        start: ::std::os::raw::c_ulong,
        n: usize,
        data_out: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_put_sarray(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        data_in: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_put_sarray_slice(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        first: ::std::os::raw::c_ulong,
        n: usize,
        data_in: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_spf(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gd_get_string(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        len: usize,
        data: *mut ::std::os::raw::c_char,
    ) -> usize;
}
extern "C" {
    pub fn gd_put_string(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_sarrays(dirfile: *mut DIRFILE) -> *mut *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn gd_strings(dirfile: *mut DIRFILE) -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn gd_strtok(
        D: *mut DIRFILE,
        string: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gd_unhide(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_validate(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_verbose_prefix(
        D: *mut DIRFILE,
        prefix: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_vector_list(dirfile: *mut DIRFILE) -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn gd_add(dirfile: *mut DIRFILE, entry: *const gd_entry_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_add_raw(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        data_type: gd_type_t,
        spf: ::std::os::raw::c_uint,
        fragment_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_add_spec(
        dirfile: *mut DIRFILE,
        line: *const ::std::os::raw::c_char,
        fragment_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_alter_encoding(
        dirfile: *mut DIRFILE,
        encoding: ::std::os::raw::c_ulong,
        fragment: ::std::os::raw::c_int,
        recode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_alter_endianness(
        dirfile: *mut DIRFILE,
        byte_sex: ::std::os::raw::c_ulong,
        fragment: ::std::os::raw::c_int,
        recode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_alter_entry(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        entry: *const gd_entry_t,
        recode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_alter_linterp(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        in_field: *const ::std::os::raw::c_char,
        table: *const ::std::os::raw::c_char,
        recode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_alter_raw(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        data_type: gd_type_t,
        spf: ::std::os::raw::c_uint,
        recode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_alter_spec(
        dirfile: *mut DIRFILE,
        line: *const ::std::os::raw::c_char,
        recode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_cbopen(
        dirfilename: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_ulong,
        sehandler: gd_parser_callback_t,
        extra: *mut ::std::os::raw::c_void,
    ) -> *mut DIRFILE;
}
extern "C" {
    pub fn gd_close(dirfile: *mut DIRFILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_delete(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_desync(dirfile: *mut DIRFILE, flags: ::std::os::raw::c_uint)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_discard(dirfile: *mut DIRFILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_flush(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_include(
        dirfile: *mut DIRFILE,
        file: *const ::std::os::raw::c_char,
        fragment_index: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_include_affix(
        dirfile: *mut DIRFILE,
        file: *const ::std::os::raw::c_char,
        fragment_index: ::std::os::raw::c_int,
        prefix: *const ::std::os::raw::c_char,
        suffix: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_include_ns(
        D: *mut DIRFILE,
        file: *const ::std::os::raw::c_char,
        fragment_index: ::std::os::raw::c_int,
        ns: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_framenum(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        value: f64,
    ) -> f64;
}
extern "C" {
    pub fn gd_malter_spec(
        dirfile: *mut DIRFILE,
        line: *const ::std::os::raw::c_char,
        parent: *const ::std::os::raw::c_char,
        recode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_metaflush(dirfile: *mut DIRFILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_move(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        new_fragment: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_open(
        dirfilename: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_ulong,
    ) -> *mut DIRFILE;
}
extern "C" {
    pub fn gd_open_limit(
        dirfile: *mut DIRFILE,
        new_limit: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn gd_raw_close(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_rename(
        dirfile: *mut DIRFILE,
        old_code: *const ::std::os::raw::c_char,
        new_name: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_rewrite_fragment(
        dirfile: *mut DIRFILE,
        fragment: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_sync(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_uninclude(
        dirfile: *mut DIRFILE,
        fragment_index: ::std::os::raw::c_int,
        del: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_alter_frameoffset(
        dirfile: *mut DIRFILE,
        offset: off_t,
        fragment: ::std::os::raw::c_int,
        recode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gd_getdata(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        first_frame: off_t,
        first_sample: off_t,
        num_frames: usize,
        num_samples: usize,
        return_type: gd_type_t,
        data: *mut ::std::os::raw::c_void,
    ) -> usize;
}
extern "C" {
    pub fn gd_putdata(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        first_frame: off_t,
        first_sample: off_t,
        num_frames: usize,
        num_samples: usize,
        data_type: gd_type_t,
        data: *const ::std::os::raw::c_void,
    ) -> usize;
}
extern "C" {
    pub fn gd_framenum_subset(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        value: f64,
        field_start: off_t,
        field_end: off_t,
    ) -> f64;
}
extern "C" {
    pub fn gd_frameoffset(dirfile: *mut DIRFILE, fragment: ::std::os::raw::c_int) -> off_t;
}
extern "C" {
    pub fn gd_nframes(dirfile: *mut DIRFILE) -> off_t;
}
extern "C" {
    pub fn gd_bof(dirfile: *mut DIRFILE, field_code: *const ::std::os::raw::c_char) -> off_t;
}
extern "C" {
    pub fn gd_eof(dirfile: *mut DIRFILE, field_code: *const ::std::os::raw::c_char) -> off_t;
}
extern "C" {
    pub fn gd_seek(
        dirfile: *mut DIRFILE,
        field_code: *const ::std::os::raw::c_char,
        frame_num: off_t,
        sample_num: off_t,
        whence: ::std::os::raw::c_int,
    ) -> off_t;
}
extern "C" {
    pub fn gd_tell(dirfile: *mut DIRFILE, field_code: *const ::std::os::raw::c_char) -> off_t;
}
